{"version":3,"sources":["assets/images/logo.png","components/Poster/Poster.module.css","hoc/asyncComponent.jsx","containers/Menu/Menu.jsx","components/Poster/Poster.jsx","App.js","serviceWorker.js","index.js","containers/Menu/Menu.module.css"],"names":["module","exports","asyncComponent","importComponent","props","state","component","then","cmp","setState","default","C","this","Component","asyncSceneLoad","asyncAboutLoad","asyncListLoad","withRouter","className","classes","Menu","onClick","history","goBack","hidden","location","pathname","path","Links","href","target","License","rel","title","Repo","Poster","src","Logo","alt","App","isLocalhost","Boolean","window","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.44cbb8a8.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.0e65a6be.png\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Poster\":\"Poster_Poster__2Ost_\"};","import React, {Component} from 'react';\r\n\r\nconst asyncComponent = (importComponent) =>{\r\n    return class extends Component{\r\n        constructor(props) {\r\n            super(props);\r\n            this.state = {\r\n                component: null\r\n            }\r\n        }\r\n\r\n        componentDidMount() {\r\n            importComponent()\r\n                .then(cmp => this.setState({component: cmp.default}));\r\n        }\r\n\r\n        render() {\r\n            const C = this.state.component;\r\n            return C ? <C {...this.props} /> : null;\r\n        }\r\n    }\r\n}\r\n\r\nexport default asyncComponent;","import React from 'react';\r\nimport classes from './Menu.module.css';\r\nimport {Route, Switch} from 'react-router-dom';\r\nimport asyncComponent from '../../hoc/asyncComponent';\r\nimport {withRouter} from 'react-router-dom';\r\n\r\nconst asyncSceneLoad = asyncComponent(() => import('./Scene/Scene'));\r\nconst asyncAboutLoad = asyncComponent(() => import('./About/About'));\r\nconst asyncListLoad = asyncComponent(() => import('./List/List'));\r\n\r\n\r\nconst Menu = (props) => {\r\n    return (\r\n        <div className={classes.Menu}>\r\n            <button\r\n                onClick={() => props.history.goBack()}\r\n                hidden={props.history.location.pathname === '/'}\r\n            >Back</button>\r\n            <Switch>\r\n                <Route path='/game' component={asyncSceneLoad}/>\r\n                <Route path='/author' component={asyncAboutLoad}/>\r\n                <Route path='/' component={asyncListLoad}/>\r\n            </Switch>\r\n            <div className={classes.Links}>\r\n                <a\r\n                    href='https://github.com/CreativeRusBear/FlappyBird/blob/master/LICENSE'\r\n                    target='_blank'\r\n                    className={classes.License}\r\n                    rel='noopener noreferrer license'\r\n                    title='Link on the licence'\r\n                ></a>\r\n                <a\r\n                    href='https://github.com/CreativeRusBear/FlappyBird'\r\n                    target='_blank'\r\n                    className={classes.Repo}\r\n                    rel='noopener noreferrer bookmark'\r\n                    title='Link on the repository'\r\n                ></a>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default withRouter(Menu);","import React from 'react';\r\nimport Logo from '../../assets/images/logo.png';\r\nimport classes from './Poster.module.css';\r\n\r\nconst Poster = (props) => {\r\n    return (\r\n        <div className={classes.Poster}>\r\n            <img src={Logo} alt=\"Logo\"/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Poster;\r\n","import React from 'react';\r\nimport {BrowserRouter} from 'react-router-dom';\r\nimport './App.css';\r\nimport Menu from './containers/Menu/Menu';\r\nimport Poster from './components/Poster/Poster';\r\n\r\nfunction App() {\r\n  return (\r\n      <BrowserRouter>\r\n        <div className=\"App\">\r\n            <Poster/>\r\n            <Menu/>\r\n        </div>\r\n      </BrowserRouter>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Menu\":\"Menu_Menu__1fgRJ\",\"Links\":\"Menu_Links__3h0ul\",\"License\":\"Menu_License__235en\",\"Repo\":\"Menu_Repo__9_QwX\"};"],"sourceRoot":""}